from pgmpy.models import BayesianNetwork
from pgmpy.estimators import MaximumLikelihoodEstimator
from pgmpy.inference import VariableElimination
import pandas as pd

# Sample data
data = pd.DataFrame(data={'Rain': ['No', 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'No'],
                          'TrafficJam': ['Yes', 'yes', 'Yes', 'No', 'Yes', 'Yes', 'No', 'No'],
                          'ArriveLate': ['Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No']})

# Define the Bayesian network structure
model = BayesianNetwork([('Rain', 'TrafficJam'), ('TrafficJam', 'ArriveLate')])

# Fit the model to the data using Maximum Likelihood Estimation
model.fit(data)

# Print conditional probability distributions
print(model.get_cpds())

# Perform inference
inference = VariableElimination(model)
query_result = inference.query(variables=['ArriveLate'], evidence={'Rain': 'Yes'})
print(query_result)

*/
import heapq

# Define the goal state
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Calculate Manhattan distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                goal_row, goal_col = divmod(state[i][j] - 1, 3)
                distance += abs(i - goal_row) + abs(j - goal_col)
    return distance

# A* search function
def a_star_search(initial_state):
    visited = set()
    heap = [(manhattan_distance(initial_state), initial_state, 0, "")]

    while heap:
        _, current_state, cost, path = heapq.heappop(heap)

        if current_state == goal_state:
            return path, cost

        zero_row, zero_col = [(i, j) for i in range(3) for j in range(3) if current_state[i][j] == 0][0]

        # Generate possible moves dynamically
        possible_moves = [(zero_row - 1, zero_col),  # Up
                          (zero_row + 1, zero_col),  # Down
                          (zero_row, zero_col - 1),  # Left
                          (zero_row, zero_col + 1)]  # Right

        for move_row, move_col in possible_moves:
            if 0 <= move_row < 3 and 0 <= move_col < 3:
                new_state = [row[:] for row in current_state]
                new_state[zero_row][zero_col], new_state[move_row][move_col] = new_state[move_row][move_col], new_state[zero_row][zero_col]

                if tuple(map(tuple, new_state)) not in visited:
                    visited.add(tuple(map(tuple, new_state)))
                    new_cost = cost + 1
                    new_path = path + str((move_row, move_col))
                    heapq.heappush(heap, (new_cost + manhattan_distance(new_state), new_state, new_cost, new_path))

    return "No solution", float('inf')

# Test the solver
initial_state = [
    [1, 0, 3],
    [4, 2, 5],
    [7, 8, 6]
]
 
path, cost = a_star_search(initial_state)

print("Initial State:")
for row in initial_state:
    print(row)

print("\nGoal State:")
for row in goal_state:
    print(row)

print(f"Number of moves: {cost}")
print(f"Path: {path}")

*/

def water_jug_problem(capacities, target):
    initial_state = (0, 0)
    queue = [(0, initial_state, [])]  # (steps, state, path)
    visited = set()

    while queue:
        steps, state, path = queue.pop(0)

        if state in visited:
            continue

        visited.add(state)

        if state == target:
            return path  # Return the sequence of actions (path) to reach the target

        for action in [('fill', 0), ('fill', 1), ('empty', 0), ('empty', 1), ('pour', 0, 1), ('pour', 1, 0)]:
            new_state = apply_action(state, action, capacities)
            if new_state not in visited:
                new_path = path + [action]  # Append the current action to the path
                queue.append((steps + 1, new_state, new_path))

    return None  # If no solution found

def apply_action(state, action, capacities):
    a, b = state
    ca, cb = capacities
    if action[0] == 'fill':
        if action[1] == 0:
            return (ca, b)
        elif action[1] == 1:
            return (a, cb)
    elif action[0] == 'empty':
        if action[1] == 0:
            return (0, b)
        elif action[1] == 1:
            return (a, 0)
    elif action[0] == 'pour':
        source, target = action[1:]
        amount = min(state[source], capacities[target] - state[target])
        new_state = list(state)
        new_state[source] -= amount
        new_state[target] += amount
        return tuple(new_state)

# Example usage:
capacities = (7, 3)  # Jug A capacity = 4, Jug B capacity = 3
target = (5, 0)      # Goal state: 2 units in Jug A, 0 units in Jug B
path = water_jug_problem(capacities, target)

if path:
    print("Steps to reach the target state:")
    for step, action in enumerate(path):
        print(f"Step {step + 1}: {action}")
else:
    print("No solution found.")
*/SUDOKU
def is_valid(board, row, col, num):
    # Check if placing 'num' at board[row][col] is valid
    # Check the row
    if num in board[row]:
        return False

    # Check the column
    for r in range(9):
        if board[r][col] == num:
            return False

    # Check the 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for r in range(start_row, start_row + 3):
        for c in range(start_col, start_col + 3):
            if board[r][c] == num:
                return False

    return True

def solve_sudoku(board):
    def backtrack():
        for row in range(9):
            for col in range(9):
                if board[row][col] == 0:  # Find empty cell
                    for num in range(1, 10):
                        if is_valid(board, row, col, num):
                            board[row][col] = num  # Place the number
                            if backtrack():  # Recursively solve
                                return True
                            board[row][col] = 0  # Backtrack
                    return False
        return True  # No empty cell found means solution is complete

    backtrack()

# Example usage:
board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

solve_sudoku(board)

# Print the solved board
for row in board:
    print(row)




